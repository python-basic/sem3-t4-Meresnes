import json

with open('MOCK_DATA.json','r',encoding='UTF-8') as f:
    handle = json.load(f)
    #print(handle)

#Вывод некоторых данных пользователя
for line in handle:
    #print(line)
    print('Номер пользователя:{}\nИмя пользователя:{}\nПочта пользователя:{}\n\n'.format(
        line.get('id'),line.get('first_name'),line.get('email')))



# Рассмотрим теперь как работать с csv-файлами.
# Работа с csv осуществляется с помощью специального модуля
# Официальная документация по этому модулю по ссылке: https://docs.python.org/3/library/csv.html

# В документации есть хороший пример с демонстрацией записи в csv файл:

import csv
with open('eggs.csv', 'w', newline='') as csvfile:
    spamwriter = csv.writer(
        csvfile, delimiter=';', quotechar=':', quoting=csv.QUOTE_MINIMAL)
    spamwriter.writerow(['Spam'] * 5 + ['Baked;Beans'])
    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])
# При выполнении кода выше будет создан eggs.csv файл с содержимым
# проанализируйте его содержимое и разберитесь почему так написано

# конструкция with .... as csvfile называется менеджером контекста, мы поговорим о нем дополнительно на лекции, а пока можно сказать, что он позволяет удобно работать с файлом не указывая каждый раз переменную с файловым дескриптором

# Вопрос 3
# Разберитесь самостоятельно, что означают параметры у методов open, writer (newline, delimiter, quotechar, quoting)

# Вопрос 4
# Какие значения у этих параметров должны быть в нашем скрипте, если мы хотим сохранять данные в csv файле, где значения разделяются _точкой с запятой_, а значения, содержащие пробелы или специальные символы (например, одинарные кавычки) были обернуты в двойные кавычки ("d'Lux")

# Инструкция writerow позволяет записать значения в файл, нам необходимо использовать этот метод, итерируясь по той структуре, которая была создана после считывания файла MOCK_DATA.json
